const testHarvestStatus = require('./utils/route-status').harvest;
const testPublisherStatus = require('./utils/route-status').publisher;
const testDatasetStatus = require('./utils/route-status').dataset;
const updateEnv = require('./utils/update-env');

module.exports = async page => {
    console.log('Creating a mock harvest source...');

    const harvestSource = {
        url: `http://static-mock-harvest-source${process.env.CKAN_VERSION === '2.8' && '-2.8'}:11088`,
        name: 'Example Harvest #1',
        slug: 'example-harvest-1',
        datasetContact: 'Example User'
    };

    if (await testPublisherStatus(page, 'example-publisher-1') === 404) {
        throw new Error('Cannot find publisher in your specified domain and therefore cannot create harvest source. Please create or generate a publisher before running the harvest source setup script.');
    }

    if (await testHarvestStatus(page, harvestSource.slug) === 404) {
        await Promise.all([
            page.goto(`${process.env.DOMAIN}/harvest/new`),
            page.waitForNavigation() 
        ]);

        await page.evaluate(harvestSource => {
            document.getElementById('field-url').value = harvestSource.url;
            document.getElementById('field-title').value = harvestSource.name;
            document.getElementById('field-name').value = harvestSource.slug;
            document.getElementById('field-notes').value = harvestSource.name;
        }, harvestSource);

        await Promise.all([
            page.click('button[type="submit"]'),
            page.waitForNavigation()
        ]);

        console.log('Checking successful mock harvest source generation...');

        if (await testHarvestStatus(page, harvestSource.slug) === 200) {
            console.log('Mock harvest source created successfully!');
        } else {
            throw new Error('Unable to verify existence of mock harvest source after automated creation. Please check that your local instance of docker-ckan is running properly and try again.');
        }

    } else {
        console.log('Mock harvest source already exists! Skipping harvest generation.');
    }

    console.log('Triggering harvest job...');

    if (await testDatasetStatus(page, 'example-dataset-number-one') === 404) {
        await Promise.all([
            page.goto(`${process.env.DOMAIN}/harvest/admin/${harvestSource.slug}`),
            page.waitForNavigation() 
        ]);
    
        await page.click('a[data-module="confirm-action"]');
        await page.reload();
    
        console.log('Checking successful harvest job trigger...');
    
        if (await testDatasetStatus(page, 'example-dataset-number-one') === 200) {
            console.log('Harvest source triggered successfully!');
        } else {
            throw new Error('Unable to verify that mock harvest source job was triggered. Please check that your local instance of docker-ckan is running properly and try again.');
        }
    } else {
        console.log('The dataset generated by the mock harvest job already exists! Skipping triggering of harvest job.')
    }

    console.log('Updating contact details of test dataset...');

    await Promise.all([
        page.goto(`${process.env.DOMAIN}/dataset/edit/example-dataset-number-one`),
        page.waitForNavigation()
    ]);

    await page.evaluate(harvestSource => {
        document.getElementById('field-contact-name').value = harvestSource.datasetContact;
    }, harvestSource);

    await Promise.all([
        page.click('button[type="submit"]'),
        page.waitForNavigation()
    ]);

    console.log('Dataset contact details updated!');

    console.log('Retreiving id of first dataset resource... These will be written to your .env file.');

    const resourceId = await page.evaluate(() => document.querySelector('.resource-item').dataset.id);
    await updateEnv([resourceId], ['STANDARD_RESOURCE']);

    console.log('.env file updated with the resource id. Harvest setup is complete!');
}